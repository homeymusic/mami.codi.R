// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// stern_brocot
NumericVector stern_brocot(const double x, const double precision);
RcppExport SEXP _mami_codi_R_stern_brocot(SEXP xSEXP, SEXP precisionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double >::type precision(precisionSEXP);
    rcpp_result_gen = Rcpp::wrap(stern_brocot(x, precision));
    return rcpp_result_gen;
END_RCPP
}
// rational_fractions
DataFrame rational_fractions(NumericVector x, const double precision, const double pseudo_octave);
RcppExport SEXP _mami_codi_R_rational_fractions(SEXP xSEXP, SEXP precisionSEXP, SEXP pseudo_octaveSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double >::type precision(precisionSEXP);
    Rcpp::traits::input_parameter< const double >::type pseudo_octave(pseudo_octaveSEXP);
    rcpp_result_gen = Rcpp::wrap(rational_fractions(x, precision, pseudo_octave));
    return rcpp_result_gen;
END_RCPP
}
// pseudo_octaves
DataFrame pseudo_octaves(const NumericVector x);
RcppExport SEXP _mami_codi_R_pseudo_octaves(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(pseudo_octaves(x));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_mami_codi_R_stern_brocot", (DL_FUNC) &_mami_codi_R_stern_brocot, 2},
    {"_mami_codi_R_rational_fractions", (DL_FUNC) &_mami_codi_R_rational_fractions, 3},
    {"_mami_codi_R_pseudo_octaves", (DL_FUNC) &_mami_codi_R_pseudo_octaves, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_mami_codi_R(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
